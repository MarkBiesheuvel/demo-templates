---
AWSTemplateFormatVersion: '2010-09-09'

Description: Web application with instances in the private subnets and load balancer in public subnets

Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      VpcId:
        default: 'Which Virtual Private Network to use?'
      PublicSubnetIds:
        default: 'Where to create the Application Load Balancer?'
      PrivateSubnetIds:
        default: 'Where to launch the EC2 instances?'
      InstanceType:
        default: 'Which EC2 instance type to use?'
      ImageId:
        default: 'Which Amazon Machine Image to use?'
      DesiredCapacity:
        default: 'How many EC2 instances to create?'
      CertificateArn:
        default: 'Which certificate to use for HTTPS?'
      CreateRedirect:
        default: 'Add redirect from HTTP to HTTPS?'
      HostedZoneName:
        default: 'Which domain name to use for DNS?'
    ParameterGroups:
      -
        Label:
          default: 'Network Configuration'
        Parameters:
          - VpcId
          - PublicSubnetIds
          - PrivateSubnetIds
      -
        Label:
          default: 'Instance Configuration'
        Parameters:
          - InstanceType
          - ImageId
          - DesiredCapacity
      -
        Label:
          default: 'Optional Configuration'
        Parameters:
          - CertificateArn
          - HostedZoneName

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

  InstanceType:
    Type: String
    Default: t4g.nano
    AllowedValues:
      - t4g.nano
      - t4g.micro
      - t4g.small
      - t4g.medium
      - t4g.large
      - t4g.xlarge
      - t4g.2xlarge

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2

  DesiredCapacity:
    Type: Number
    Default: 4
    MinValue: 2
    MaxValue: 10

  CertificateArn:
    Type: String
    Default: ''

  HostedZoneName:
    Type: String # AWS::Route53::HostedZone::Id
    Default: ''

Conditions:
  CreatePlainTextListener:
    !Equals [!Ref 'CertificateArn', '']
  CreateSecureListener:
    !Not [!Equals [!Ref 'CertificateArn', '']]
  CreateDnsRecord:
    !Not [!Equals [!Ref 'HostedZoneName', '']]

Resources:

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  SecurityGroupInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Access from load balancer to instances
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt SecurityGroupLoadBalancer.GroupId

  SecurityGroupLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access from everywhere to load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceMonitoring: True
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref SecurityGroupInstance
      ImageId: !Ref ImageId
      UserData: !Base64 |
        #!/bin/sh
        yum update -y
        yum install -y httpd
        availability_zone=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
        instance_id=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
        echo "<html><body><h1>$instance_id</h1><p>$availability_zone</p></body></html>" > /var/www/html/index.html
        service httpd start

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: !Ref DesiredCapacity
      MaxSize: 12
      Cooldown: 0
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      VPCZoneIdentifier: !Ref PrivateSubnetIds
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        -
          Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: True
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 2
        MinInstancesInService: !Ref DesiredCapacity

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        -
          Key: deregistration_delay.timeout_seconds
          Value: 20

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref SecurityGroupLoadBalancer

  PlainTextListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        -
          !If
            - CreatePlainTextListener
            -
              Type: forward
              TargetGroupArn: !Ref TargetGroup
            -
              Type: redirect
              RedirectConfig:
                Port: 443
                Protocol: HTTPS
                StatusCode: HTTP_302

  SecureListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: CreateSecureListener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-1-2-2019-08
      Certificates:
        -
          CertificateArn: !Ref CertificateArn
      DefaultActions:
        -
          Type: forward
          TargetGroupArn: !Ref TargetGroup

  DnsRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDnsRecord
    Properties:
      Type: A
      HostedZoneName: !Ref HostedZoneName
      Name: !Sub '${AWS::StackName}.${HostedZoneName}'
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId:  !GetAtt LoadBalancer.CanonicalHostedZoneID
        EvaluateTargetHealth: True
