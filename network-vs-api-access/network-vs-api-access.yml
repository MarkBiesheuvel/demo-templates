---
AWSTemplateFormatVersion: '2010-09-09'

Description: EC2 instance with SSH and Session Manager + RDS database with MySQL and rds-data API

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:

  SecurityGroupInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from anywhere
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  SecurityGroupDatabase:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Access from EC2 instance to Database
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt SecurityGroupInstance.GroupId

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ImageId
      NetworkInterfaces:
        -
          DeviceIndex: 0
          AssociatePublicIpAddress: True
          SubnetId: !Select
            - 0
            - !Ref PublicSubnetIds
          GroupSet:
            - !Ref SecurityGroupInstance
      UserData: !Base64 |
        #!/bin/bash -xe
        yum update -y
        yum install -y mysql
      Tags:
        -
          Key: Name
          Value: demo

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    Properties:
      DBSubnetGroupName: !Ref DatbaseSubnetGroup
      DBClusterParameterGroupName: default.aurora5.6
      Engine: aurora
      EngineMode: serverless
      EngineVersion: 5.6.10a
      MasterUsername: demo
      MasterUserPassword: network1
      DatabaseName: demo
      EnableHttpEndpoint: True
      VpcSecurityGroupIds:
        - !Ref SecurityGroupDatabase
      ScalingConfiguration:
        AutoPause: False # Avoid database going off before demo
        MinCapacity: 1
        MaxCapacity: 16

  DatbaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Demo subnets
      SubnetIds: !Ref PublicSubnetIds

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: rds-db-credentials/demo
      SecretString: !Sub |
        {
          "username": "demo",
          "password": "network1",
          "engine": "mysql",
          "host": "${DatabaseCluster.Endpoint.Address}",
          "port": 3306,
          "dbClusterIdentifier": "${DatabaseCluster}"
        }

Outputs:

  SshCommand:
    Description: Run this command to demonstrate SSH
    Value: !Sub ssh ec2-user@${Instance.PublicIp}

  MysqlCommand:
    Description: Run this command to demonstrate MySQL
    Value: !Sub mysql -h ${DatabaseCluster.Endpoint.Address} -u demo -pnetwork1

  DataApiCommnd:
    Description: Run this command to demonstrate RDS Data API
    Value: !Sub |
      aws rds-data execute-statement --resource-arn "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DatabaseCluster}" --database "demo" --secret-arn "${DatabaseSecret}" --sql "select TABLE_SCHEMA, COUNT(1) from information_schema.tables group by TABLE_SCHEMA;"
