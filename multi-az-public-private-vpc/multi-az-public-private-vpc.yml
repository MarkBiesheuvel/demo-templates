---
AWSTemplateFormatVersion: '2010-09-09'

Description: Public and private subnets in three AZs

Parameters:

  CidrRange:
    Type: String
    Default: 10.11.12.0/24

  RedundantNAT:
    Type: String
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'

Conditions:

  CreateRedundantNAT:
    !Equals [!Ref 'RedundantNAT', 'Yes']

Resources:

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrRange
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw

  InternetGatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGatewayAttachement
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-route-table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  RouteTablePublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  RouteTablePublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  RouteTablePublicSubnet3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 0
        - !Cidr [!Ref CidrRange, 4, 4]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr [!Ref CidrRange, 4, 4]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 2
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr [!Ref CidrRange, 4, 4]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-3

  NatIp1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatIp2:
    Type: AWS::EC2::EIP
    Condition: CreateRedundantNAT
    Properties:
      Domain: vpc

  NatIp3:
    Type: AWS::EC2::EIP
    Condition: CreateRedundantNAT
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatIp1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nat-gw-1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: CreateRedundantNAT
    Properties:
      AllocationId: !GetAtt NatIp2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nat-gw-2

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Condition: CreateRedundantNAT
    Properties:
      AllocationId: !GetAtt NatIp3.AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nat-gw-3

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-route-table-1

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable1

  RouteTablePrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: CreateRedundantNAT
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-route-table-2

  PrivateRoute2:
    Type: AWS::EC2::Route
    Condition: CreateRedundantNAT
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
      RouteTableId: !Ref PrivateRouteTable2

  RouteTablePrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !If
          - CreateRedundantNAT
          - !Ref PrivateRouteTable2
          - !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Condition: CreateRedundantNAT
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-route-table-3

  PrivateRoute3:
    Type: AWS::EC2::Route
    Condition: CreateRedundantNAT
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3
      RouteTableId: !Ref PrivateRouteTable3

  RouteTablePrivateSubnet3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !If
          - CreateRedundantNAT
          - !Ref PrivateRouteTable3
          - !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr [!Ref CidrRange, 4, 6]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr [!Ref CidrRange, 4, 6]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 2
        - !GetAZs ''
      CidrBlock: !Select
        - 3
        - !Cidr [!Ref CidrRange, 4, 6]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-3

Outputs:

  VpcId:
    Value: !Ref Vpc

  PublicSubnetIds:
    Value: !Sub ${PublicSubnet1},${PublicSubnet2},${PublicSubnet3}

  PrivateSubnetIds:
    Value: !Sub ${PrivateSubnet1},${PrivateSubnet2},${PrivateSubnet3}
